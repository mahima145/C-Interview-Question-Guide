

1) OOPs on tips as in theory wise and writing classes and explaning why's?

2) Class Hierarchy and How Association, Aggregation and Composition is implemented with example?

3) Why we pass &reference instead of value ? Expects a brief answer instead of 1 liner. 
** reference returns a ptr which is of integer type and value return total size of object , hence references are used for reduce memory in use.

4) Difference between global variable and static variable?

5) Types of Exceptions and stack unwinding?

6) SOLID principle and how you have designed classes using first 3 principles?

7) Function pointers, example questions?

8) Casting operators static, const, dynamic, reinterpret with example. Which one is used most?

9) Left and Right operators? 

10) Move operator and constructor?



Difference between static and dynamic/shared libraries?

Stages of Program compilation?

Example of new and delete operator?

Difference between C,C++?

What is Association, Aggregation, Composition with example?

SOLID design principle?

-- Single Responsibility Principle = A class should have only one functionality.
-- Open Closed Principle = A class should be open for code extension but closed for modification. 
-- Liskov's Substitution Principle = Every subclass/derived class should be substitutable for their base/parent class.
-- Interface Segregation Principle = A client should never be forced to implement an interface that it doesn't use or clients shouldn't be forced to depend on methods they do not use.
-- Dependency Inversion Principle = Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module,
    but they should depend on abstractions.

Refer: https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design

== For Design related : https://www.geeksforgeeks.org/software-engineering-coupling-and-cohesion/


